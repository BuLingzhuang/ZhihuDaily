package com.blz.zhihudaily.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.blz.zhihudaily.entities.StoryDetailEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY_DETAIL_ENTITY".
*/
public class StoryDetailEntityDao extends AbstractDao<StoryDetailEntity, String> {

    public static final String TABLENAME = "STORY_DETAIL_ENTITY";

    /**
     * Properties of entity StoryDetailEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Body = new Property(0, String.class, "body", false, "BODY");
        public final static Property Image_source = new Property(1, String.class, "image_source", false, "IMAGE_SOURCE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Share_url = new Property(4, String.class, "share_url", false, "SHARE_URL");
        public final static Property Js = new Property(5, String.class, "js", false, "JS");
        public final static Property Ga_prefix = new Property(6, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Section_thumbnail = new Property(7, String.class, "section_thumbnail", false, "SECTION_THUMBNAIL");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Id = new Property(9, String.class, "id", true, "ID");
        public final static Property Css = new Property(10, String.class, "css", false, "CSS");
    };


    public StoryDetailEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StoryDetailEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY_DETAIL_ENTITY\" (" + //
                "\"BODY\" TEXT," + // 0: body
                "\"IMAGE_SOURCE\" TEXT," + // 1: image_source
                "\"TITLE\" TEXT," + // 2: title
                "\"IMAGE\" TEXT," + // 3: image
                "\"SHARE_URL\" TEXT," + // 4: share_url
                "\"JS\" TEXT," + // 5: js
                "\"GA_PREFIX\" TEXT," + // 6: ga_prefix
                "\"SECTION_THUMBNAIL\" TEXT," + // 7: section_thumbnail
                "\"TYPE\" TEXT," + // 8: type
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 9: id
                "\"CSS\" TEXT);"); // 10: css
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY_DETAIL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoryDetailEntity entity) {
        stmt.clearBindings();
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(1, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(2, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String js = entity.getJs();
        if (js != null) {
            stmt.bindString(6, js);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(7, ga_prefix);
        }
 
        String section_thumbnail = entity.getSection_thumbnail();
        if (section_thumbnail != null) {
            stmt.bindString(8, section_thumbnail);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(10, id);
        }
 
        String css = entity.getCss();
        if (css != null) {
            stmt.bindString(11, css);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9);
    }    

    /** @inheritdoc */
    @Override
    public StoryDetailEntity readEntity(Cursor cursor, int offset) {
        StoryDetailEntity entity = new StoryDetailEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // body
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image_source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // share_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // js
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ga_prefix
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // section_thumbnail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // css
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoryDetailEntity entity, int offset) {
        entity.setBody(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage_source(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShare_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJs(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGa_prefix(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSection_thumbnail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCss(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StoryDetailEntity entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StoryDetailEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
